# the task is to layout the ETL process using python and 3rd party libraries

pip install pyarrow

# Importing libraries
import pandas as pd
import os
from snowflake.sqlalchemy import URL
from sqlalchemy import create_engine
import pyarrow.parquet as pq

--------------------------------------------------------------------------------------
# For Parquet files
parquet_files = ['file_01.parquet', 
                 'file_02.parquet', 
                 'file_03.parquet']

# Extracting data into dataframes
data_frames = []

for file in parquet_files:
    df = pq.read_table(file).to_pandas()
    data_frames.append(df)

all_data = pd.concat(data_frames, ignore_index=True)


------------------------------------------------------------------------------------------------

# Transform the data depending on the need. in the following example the data is lablelled and some calculations are done.
all_data = all_data.dropna()  # to remove rows with missing data
all_data = all_data.rename(columns={'column1': 'col1', 'column2': 'col2'})
all_data['col1'] = pd.xyz_1(all_data['col1'])
all_data['col2'] = pd.xyz_2(all_data['col2'])
all_data['col3'] = all_data['col_2'] - all_data['col_1']
all_data['col4'] = all_data['col3'].dt.total_seconds() / 60

---------------------------------------------------------------------------------------------------------
# Load the data into Snowflake
snowflake_user = 'user_name'
snowflake_password = 'password'
snowflake_account = 'account_name'
snowflake_database = 'database_name'
snowflake_schema = 'schema_name'
snowflake_warehouse = 'warehouse_name'

engine = create_engine(URL(
    user=snowflake_user,
    password=snowflake_password,
    account=snowflake_account,
    database=snowflake_database,
    schema=snowflake_schema,
    warehouse=snowflake_warehouse
))

with engine.connect() as connection:
    connection.execute(f"CREATE SCHEMA IF NOT EXISTS {snowflake_schema}")
    connection.execute(f"USE SCHEMA {snowflake_schema}")
    connection.execute("""
        CREATE TABLE IF NOT EXISTS taxi_trips (
            col1 TIMESTAMP,
            col2 TIMESTAMP,
            col5 INTEGER,
            col6 FLOAT,
            col7 INTEGER,
            col8 STRING,
            col9 INTEGER,
            col10 FLOAT,
            col11 FLOAT,
            col12 FLOAT,
            col13 FLOAT,
            col4 INTERVAL MINUTE
        )
    """)

    all_data.to_sql('table_1', engine, if_exists='replace', index=False)


---------------------------------------------------------------------------
